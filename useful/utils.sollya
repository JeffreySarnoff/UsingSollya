/* gathered and extended from other files present in the repository */
/*
   minmax(a, b)
   minmax(list1)
   
   reverse(list1) -> reversed(list1...)
   revsort(list1) -> reverse(sort(list1))
   
   prepend(item, list1)  -> [| item, list1... |]
   postpend(list1, item) -> [| list1..., item |]
   append(list1, list2) -> [| list1..., list2... |]
   
   dropfirst(list1) -> tail(list1)
   droplast(list1) -> reverse(tail(reverse(list1)))
   dropith(list1, ith) -> list1 without ith element
   dropiths(list1, indiceslist) -> list1 with ith elements
   
   keepiths(list1, indiceslist) -> list1[ indicieslist ]
   
   contains_zero(I)

   contains_element(list, element)
   all_elements_are_equal(list)
   
   split_list(list, idx)
   
   join_lists(list1, list2)
   join_lists(list1, list2, list3)
   join_lists(list1, list2, list3, list4)
   
   intersect_lists = proc(L1, L2)
   
   get_poly_from_list(L)

*/

procedure minmax(a,b)
{
  var res;
  if (b>a) then res=[|a,b|];
  else res=[|b,a|];
  return res;
};

procedure minmax(list1)
{
  var res;
  var mn, mx;
  mn = min(list1);
  mx = max(list1);
  res = [| mn, mx |];
  return res;
};

procedure reverse(list1) {
  var res;
  var val, n, i;
  n = length(list1) - 1;
  res = [| |];
  for i = 0 to n do { val = list1[n-i]; res = res :. val; };
  return res;
};

procedure revsort(list1) {
  var srt, res;
  srt = sort(list1);
  res = reverse(srt);
  return res;
};

procedure prepend(item1, list1) {
  var res;
  res = [| item1 |] @ list1;
  return res;
};

procedure postpend(list1, item1) {
  var res;
  res = list1 :. item1;
  return res;
};

procedure append(list1, list2) {
  var res;
  res = list1 @ list2;
  return res;
};

procedure dropfirst(list1) {
  var res;
  res = tail(list1);
  return(res);
};

procedure droplast(list1) {
  var res;
  var n, i;
  n = length(list1);
  res = [| |];
  for i = 0 to (n-1) do { res = res :. list1[i]; };
  return res;
};

procedure dropith(list1, ith) {
  var res;
  var n, i, istart, iend;
  n = length(list1) - 1;
  istart = 0;
  if (ith == 0) then istart = 1;
  iend = n;
  if (ith == n) then iend = n-1;
  res = [| |];
  for i = istart to iend do { if (i!=ith) then res = res :. list1[i]; };
  return res;
};

procedure droptiths(list1, indiceslist) {
  var res;
  var idx, indiceshi2lo;
  indiceshi2lo = revsort(indiceslist);
  res = list1;
  for idx in indiceshi2lo do {res = dropith(res, idx);};
  return res;
};

procedure keepiths(list1, indices) {
  var res;
  if (max(indices) >= length(list1)) then res=error else res=get_sublist(list1, indices); 
  return res;
};

procedure get_sublist(list1, indices) {
  var res;
  var nelems, n, i, idx, val;
  n = length(indices);
  nelems = length(list1);
  res = [| |];
  for i from 0 to (n-1) do {
    idx = indices[i];
    val = list1[idx];
    res = res :. val;
  };
  return res;
};


/* ------------------- ^ is ok --------------- */

procedure contains_zero(I)
{
  var r;
  if ((sup(I)>0) && (inf(I)<0)) then r=true
  else r=false;
  return r;
};

procedure contains_element(l, e) {
      var i;
      var contained;
      var ll;

      contained = false;
      i = 0;
      ll = length(l);
      while ((i < ll) && (!contained)) do {
        if (l[i] == e) then {
           contained = true;
        };
        i := i + 1;
      };

      return contained;
};

procedure all_elements_are_equal(l) {
      var res, c, ll, h;

      if (l == [||]) then {
         res = true;
      } else {
         res = true;
         c = head(l);
         ll = tail(l);
         while (res && (ll != [||])) do {
               h = head(ll);
           ll = tail(ll);
           if (h != c) then {
              res = false;
           };
         };
      };

      return res;
};

procedure split_list(l, i) {
      var res;
      var lA, lB, k, lenL;

      lenL = length(l);
      if ((i < 0) || (i >= lenL)) then {
         res.lA = l;
         res.lB = [||];
      } else {
        lA = [||];
        for k from 0 to i - 1 do {
            lA = lA :. (l[k]);
        };
        lB = [||];
        for k from i to lenL - 1 do {
            lB = lB :. (l[k]);
        };
        res.lA = lA;
        res.lB = lB;
      };

      return res;
};

procedure split_list(l, i1, i2) {
       var res;
       var l1, l2;
       
       l1 = split_list(l, i1);
       l2 = split_list(l1.1B, i2-i1);
       
       res.1A = l1.1A;
       res.1B = l2.1A;
       res.1C = 12.1B;
       
       return res;
};

procedure join_lists(l1, l2) {
       var res;
       var k, len1, len2;
       
       len1 = length(l1);
       len2 = length(l2);
       
       res = [||];
       for k from 0 to (len1-1) do {
          res = res :. (l1[k]);
       };
       for k from 0 to (len2-1) do {
          res = res :. (l2[k]);
       };
       
       return res;
};

procedure join_lists(l1, l2, l3) {
       var tmp, res;
       
       tmp = join_lists(l1, l2);
       res = join_lists(tmp, l3);
       
       return res;
};

procedure join_lists(l1, l2, l3, l4) {
       var tmp, res;
       
       tmp = join_lists(l1, l2, l3);
       res = join_lists(tmp, l4);
       
       return res;
};

/*****************************************************************

intersect_lists:
     Input: two lists L1 and L2 containing intervals
     Output: a list of intervals equal to the intersection of
             the union of the elements of L1 and the union of
             the elements of L2.

result = intersect_lists(listLeftBound, listRightBound);
*****************************************************************/

intersect_lists = proc(L1, L2) {
  var result;

  if (length(L1)==0) || (length(L2)==0)
  then result = [||]
  else {
    if inf(L1[0]) <= inf(L2[0])
    then {
      if inf(L2[0]) <= sup(L1[0])
      then { if sup(L2[0]) <= sup(L1[0])
             then result = L2[0] .: intersectLists(L1, tail(L2))
             else result = [inf(L2[0]) ; sup(L1[0])] .: intersectLists(tail(L1), L2);
           }
      else result = intersectLists(tail(L1), L2);
    }
    else {
      if inf(L1[0]) <= sup(L2[0])
      then { if sup(L1[0]) <= sup(L2[0])
             then result = L1[0] .: intersectLists(tail(L1), L2)
             else result = [inf(L1[0]) ; sup(L2[0])] .: intersectLists(L1, tail(L2));
           }
      else result = intersectLists(L1, tail(L2));
    };
  };

  return result;
};


procedure get_poly_from_list(L) {
  var t,i;
  t=L[length(L)-1];
  for i from length(L)-2 to 0 by -1 do
    t:=x*t+L[i];
  return horner(t);
};
